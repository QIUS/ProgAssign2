## These two function will create a matrix which can cache its inverse

## makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.

makeCacheMatrix <- function(x = matrix()) {
        m  <- NULL
        set  <- function(y){
                x <<- y
                m <<- NULL 
        }
        get  <- function() x
        setinver  <- function(inverse) m  <<- inverse
        getinver  <- function() m
        list(set <- set, get <- get, 
             setinver <- setinver, 
             getinver <- getinver)
        
}

## cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed), 
## then the cachesolve should retrieve the inverse from the cache.

## Compute the inverse matrix here
## If already inverse, then the matrix stay the same
## and cache was the output

cacheSolve <- function(x, ...) {
        m  <- x$getinver()
        if (!is.null(m)){
                message("getting cached data")
                return(m)
        }
        data  <- x$get()
        m  <- solve(data, ...)
        x$setinverse(m)
        m
        ## Return a matrix that is the inverse of 'x'
}
